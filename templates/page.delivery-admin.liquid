{% comment %}
  Delivery Admin Configuration Page with Date-Based Google Sheets Integration
  Create a new page template: page.delivery-settings.liquid
  Then create a page in Shopify admin using this template
  Set page visibility to "Hidden"
{% endcomment %}

{% comment %}
  SECURITY: Add access control before going live!
  Uncomment the following block and update the email domain:
{% endcomment %}
{% comment %}
{% unless customer and (customer.tags contains 'admin' or customer.email contains '@yourdomain.com') %}
<script>
  // Redirect non-admin users
  window.location.href = '/';
</script>
{% endunless %}
{% endcomment %}

<style>
  .admin-warning {
    background: #ff6b6b;
    color: white;
    padding: 15px;
    text-align: center;
    font-weight: bold;
    margin-bottom: 20px;
  }
  
  .admin-panel {
    background: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .admin-header {
    margin-bottom: 30px;
  }
  
  .admin-header h1 {
    color: #333;
    margin-bottom: 10px;
  }
  
  .admin-tabs {
    display: flex;
    gap: 10px;
    margin-bottom: 30px;
    border-bottom: 2px solid #e0e0e0;
  }
  
  .admin-tab {
    padding: 10px 20px;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 16px;
    color: #666;
    border-bottom: 3px solid transparent;
    margin-bottom: -2px;
  }
  
  .admin-tab.active {
    color: #46b200;
    border-bottom-color: #46b200;
  }
  
  .tab-content {
    display: none;
  }
  
  .tab-content.active {
    display: block;
  }
  
  .date-controls {
    background: #f8f8f8;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
  }
  
  .date-controls h3 {
    margin-bottom: 15px;
    color: #333;
  }
  
  .date-inputs {
    display: flex;
    gap: 20px;
    align-items: end;
    flex-wrap: wrap;
  }
  
  .input-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }
  
  .input-group label {
    font-size: 12px;
    color: #777;
  }
  
  .input-group input, .input-group select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    width: 100%;
  }
  
  .apply-btn {
    padding: 8px 20px;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .apply-btn:hover {
    background: #0056b3;
  }
  
  .dates-grid {
    display: grid;
    gap: 15px;
    max-height: 500px;
    overflow-y: auto;
    padding: 10px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background: #fafafa;
  }
  
  .date-card {
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 15px;
    background: white;
  }
  
  .date-card.disabled {
    background: #f5f5f5;
    opacity: 0.7;
  }
  
  .date-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }
  
  .date-header h4 {
    color: #333;
    margin: 0;
  }
  
  .date-day {
    color: #666;
    font-size: 14px;
  }
  
  .time-slots {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 15px;
  }
  
  .slot-config {
    background: #f8f8f8;
    padding: 12px;
    border-radius: 5px;
    border: 1px solid #e0e0e0;
  }
  
  .slot-config h5 {
    color: #666;
    margin-bottom: 10px;
    font-size: 14px;
  }
  
  .save-btn {
    margin-top: 20px;
    padding: 12px 30px;
    background: #46b200;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background 0.3s;
  }
  
  .save-btn:hover:not(:disabled) {
    background: #3a9200;
  }
  
  .save-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
  }
  
  .toggle-switch {
    position: relative;
    display: inline-block;
    width: 50px;
    height: 24px;
  }
  
  .toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 24px;
  }
  
  .slider:before {
    position: absolute;
    content: "";
    height: 16px;
    width: 16px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
  }
  
  input:checked + .slider {
    background-color: #46b200;
  }
  
  input:checked + .slider:before {
    transform: translateX(26px);
  }
  
  .message {
    padding: 15px 20px;
    border-radius: 5px;
    margin-bottom: 20px;
    display: none;
  }
  
  .message.success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }
  
  .message.error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }
  
  .stat-card {
    background: white;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #e0e0e0;
    text-align: center;
  }
  
  .stat-card h3 {
    color: #666;
    font-size: 14px;
    margin-bottom: 10px;
  }
  
  .stat-card .value {
    font-size: 32px;
    font-weight: bold;
    color: #46b200;
  }
  
  .bookings-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
  }
  
  .bookings-table th,
  .bookings-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #e0e0e0;
  }
  
  .bookings-table th {
    background: #f8f8f8;
    font-weight: 600;
    color: #666;
  }
  
  .clear-btn {
    background: #dc3545;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
  }
  
  .clear-btn:hover {
    background: #c82333;
  }
  
  .setup-instructions {
    background: #f0f8ff;
    border: 1px solid #b0d4ff;
    padding: 20px;
    border-radius: 8px;
    margin-top: 20px;
  }
  
  .setup-instructions h3 {
    color: #0066cc;
    margin-bottom: 10px;
  }
</style>

<div class="page-width">
  <div class="admin-warning">
    ⚠️ TEST MODE - Add access control before going live!
  </div>
  
  <div class="admin-panel">
    <div class="admin-header">
      <h1>Delivery Schedule Settings</h1>
      <p>Configure delivery capacity by date</p>
    </div>
    
    <div class="message success" id="successMessage"></div>
    <div class="message error" id="errorMessage"></div>
    
    <div class="admin-tabs">
      <button class="admin-tab active" onclick="switchTab('capacity')">Capacity Settings</button>
      <button class="admin-tab" onclick="switchTab('bookings')">Current Bookings</button>
    </div>
    
    <!-- Capacity Settings Tab -->
    <div class="tab-content active" id="capacity-tab">
      <div class="date-controls">
        <h3>Date Range Configuration</h3>
        <div class="date-inputs">
          <div class="input-group">
            <label>Start Date</label>
            <input type="date" id="startDate">
          </div>
          <div class="input-group">
            <label>End Date</label>
            <input type="date" id="endDate">
          </div>
          <div class="input-group">
            <label>Apply Pattern</label>
            <select id="patternSelect">
              <option value="all">All Days</option>
              <option value="weekdays">Weekdays Only</option>
              <option value="weekends">Weekends Only</option>
              <option value="custom">Custom</option>
            </select>
          </div>
          <button class="apply-btn" onclick="applyDateRange()">Load/Create Dates</button>
        </div>
      </div>
      
      <div class="dates-grid" id="datesGrid">
        <!-- Date configurations will be generated here -->
      </div>
      
      <div style="display: flex; gap: 10px; margin-top: 20px;">
        <button class="save-btn" onclick="saveConfiguration()" id="saveBtn">Save Configuration</button>
        <button class="save-btn" onclick="syncFromBackend()" style="background: #007bff;" id="syncBtn">
          Sync from Backend
        </button>
      </div>
      
      <div class="setup-instructions">
        <h3>Backend Status</h3>
        <p id="backendStatus">Checking...</p>
      </div>
      
      <div style="margin-top: 20px; padding: 15px; background: #f0f0f0; border-radius: 5px;">
        <strong>Debugging Info:</strong>
        <button onclick="checkCurrentConfig()" style="margin-left: 10px; padding: 5px 10px; background: #007bff; color: white; border: none; border-radius: 3px; cursor: pointer;">Check Current Config</button>
        <button onclick="clearAllData()" style="margin-left: 10px; padding: 5px 10px; background: #dc3545; color: white; border: none; border-radius: 3px; cursor: pointer;">Clear All Data</button>
        <pre id="debugInfo" style="margin-top: 10px; background: white; padding: 10px; border-radius: 3px; overflow-x: auto;"></pre>
      </div>
    </div>
    
    <!-- Bookings Tab -->
    <div class="tab-content" id="bookings-tab">
      <div class="stats-grid">
        <div class="stat-card">
          <h3>Total Bookings Today</h3>
          <div class="value" id="todayBookings">0</div>
        </div>
        <div class="stat-card">
          <h3>This Week</h3>
          <div class="value" id="weekBookings">0</div>
        </div>
        <div class="stat-card">
          <h3>This Month</h3>
          <div class="value" id="monthBookings">0</div>
        </div>
      </div>
      
      <h3>Current Bookings by Slot</h3>
      <table class="bookings-table" id="bookingsTable">
        <thead>
          <tr>
            <th>Date</th>
            <th>Slot</th>
            <th>Bookings</th>
            <th>Capacity</th>
            <th>Available</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <!-- Bookings will be populated here -->
        </tbody>
      </table>
    </div>
  </div>
</div>

<script>
// Admin Configuration Script with Date-Based Google Sheets Integration
(function() {
  let deliveryCapacity = {};
  let bookedSlots = {};
  let currentDateRange = { start: null, end: null };
  
  // YOUR GOOGLE SCRIPT URL
  const GOOGLE_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbx-nbIlcaJ8-GJfASu0nLddoOwMtz05n2BDOkhYeWtTopUZl6h-wi0P1vEnmJlasCf3dA/exec';
  
  // Initialize
  function init() {
    // Set default date range (today + 30 days)
    const today = new Date();
    document.getElementById('startDate').value = formatDate(today);
    document.getElementById('startDate').min = formatDate(today);
    
    const endDate = new Date(today);
    endDate.setDate(today.getDate() + 30);
    document.getElementById('endDate').value = formatDate(endDate);
    
    loadFromLocalStorage();
    checkBackendStatus();
    
    // Auto-sync on load
    syncFromBackend();
  }
  
  function loadFromLocalStorage() {
    const saved = localStorage.getItem('deliveryCapacity');
    if (saved) {
      try {
        deliveryCapacity = JSON.parse(saved);
      } catch (e) {
        console.error('Failed to parse saved config:', e);
        deliveryCapacity = {};
      }
    }
    
    const savedBookings = localStorage.getItem('bookedSlots');
    if (savedBookings) {
      try {
        bookedSlots = JSON.parse(savedBookings);
      } catch (e) {
        console.error('Failed to parse saved bookings:', e);
        bookedSlots = {};
      }
    }
  }
  
  function checkBackendStatus() {
    const statusEl = document.getElementById('backendStatus');
    
    if (!GOOGLE_SCRIPT_URL || !GOOGLE_SCRIPT_URL.includes('script.google.com')) {
      statusEl.innerHTML = '❌ No backend configured - Using local storage only';
      statusEl.style.color = '#dc3545';
    } else {
      statusEl.innerHTML = '⏳ Checking backend connection...';
      
      fetch(GOOGLE_SCRIPT_URL + '?action=config')
        .then(response => response.json())
        .then(data => {
          if (data.config) {
            statusEl.innerHTML = '✅ Connected to Google Sheets backend';
            statusEl.style.color = '#28a745';
          } else {
            throw new Error('Invalid response');
          }
        })
        .catch(error => {
          statusEl.innerHTML = '❌ Backend error: ' + error.message;
          statusEl.style.color = '#dc3545';
        });
    }
  }
  
  window.applyDateRange = function() {
    const startDate = new Date(document.getElementById('startDate').value);
    const endDate = new Date(document.getElementById('endDate').value);
    const pattern = document.getElementById('patternSelect').value;
    
    if (startDate > endDate) {
      alert('Start date must be before end date');
      return;
    }
    
    currentDateRange = { start: startDate, end: endDate };
    
    // Default configuration
    const defaultConfig = {
      enabled: true,
      morning: { start: '08:00', end: '12:00', capacity: 20 },
      evening: { start: '16:00', end: '20:00', capacity: 25 }
    };
    
    // Create/load configurations for date range
    for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
      const dateStr = formatDate(d);
      const dayOfWeek = d.getDay();
      
      // Skip based on pattern
      if (pattern === 'weekdays' && (dayOfWeek === 0 || dayOfWeek === 6)) continue;
      if (pattern === 'weekends' && dayOfWeek !== 0 && dayOfWeek !== 6) continue;
      
      // Create config if it doesn't exist
      if (!deliveryCapacity[dateStr]) {
        deliveryCapacity[dateStr] = JSON.parse(JSON.stringify(defaultConfig));
      }
    }
    
    renderDateCards();
  };
  
  function renderDateCards() {
    const grid = document.getElementById('datesGrid');
    grid.innerHTML = '';
    
    if (!currentDateRange.start || !currentDateRange.end) {
      grid.innerHTML = '<p style="text-align: center; color: #666;">Please select a date range above</p>';
      return;
    }
    
    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    
    // Sort dates
    const sortedDates = Object.keys(deliveryCapacity).sort();
    
    sortedDates.forEach(dateStr => {
      const date = new Date(dateStr);
      
      // Only show dates in current range
      if (date < currentDateRange.start || date > currentDateRange.end) return;
      
      const config = deliveryCapacity[dateStr];
      const dayName = dayNames[date.getDay()];
      
      const dateCard = document.createElement('div');
      dateCard.className = 'date-card' + (!config.enabled ? ' disabled' : '');
      dateCard.innerHTML = `
        <div class="date-header">
          <h4>${dateStr} <span class="date-day">(${dayName})</span></h4>
          <label class="toggle-switch">
            <input type="checkbox" ${config.enabled ? 'checked' : ''} 
                   onchange="toggleDate('${dateStr}', this.checked)">
            <span class="slider"></span>
          </label>
        </div>
        <div class="time-slots" style="${!config.enabled ? 'opacity: 0.5' : ''}">
          <div class="slot-config">
            <h5>Morning Delivery</h5>
            <div class="input-group">
              <label>Start Time</label>
              <input type="time" value="${extractTime(config.morning.start)}" 
                     onchange="updateSlot('${dateStr}', 'morning', 'start', this.value)"
                     ${!config.enabled ? 'disabled' : ''}>
            </div>
            <div class="input-group">
              <label>End Time</label>
              <input type="time" value="${extractTime(config.morning.end)}" 
                     onchange="updateSlot('${dateStr}', 'morning', 'end', this.value)"
                     ${!config.enabled ? 'disabled' : ''}>
            </div>
            <div class="input-group">
              <label>Max Orders</label>
              <input type="number" value="${config.morning.capacity}" min="0" 
                     onchange="updateSlot('${dateStr}', 'morning', 'capacity', this.value)"
                     ${!config.enabled ? 'disabled' : ''}>
            </div>
          </div>
          <div class="slot-config">
            <h5>Evening Delivery</h5>
            <div class="input-group">
              <label>Start Time</label>
              <input type="time" value="${extractTime(config.evening.start)}" 
                     onchange="updateSlot('${dateStr}', 'evening', 'start', this.value)"
                     ${!config.enabled ? 'disabled' : ''}>
            </div>
            <div class="input-group">
              <label>End Time</label>
              <input type="time" value="${extractTime(config.evening.end)}" 
                     onchange="updateSlot('${dateStr}', 'evening', 'end', this.value)"
                     ${!config.enabled ? 'disabled' : ''}>
            </div>
            <div class="input-group">
              <label>Max Orders</label>
              <input type="number" value="${config.evening.capacity}" min="0" 
                     onchange="updateSlot('${dateStr}', 'evening', 'capacity', this.value)"
                     ${!config.enabled ? 'disabled' : ''}>
            </div>
          </div>
        </div>
      `;
      grid.appendChild(dateCard);
    });
    
    if (grid.children.length === 0) {
      grid.innerHTML = '<p style="text-align: center; color: #666;">No dates configured in this range. Click "Load/Create Dates" to add dates.</p>';
    }
  }
  
  // Helper function to extract time from various formats
  function extractTime(timeValue) {
    if (!timeValue) return '08:00';
    if (typeof timeValue === 'string') {
      if (timeValue.match(/^\d{2}:\d{2}$/)) return timeValue;
      const parts = timeValue.split(' ');
      return parts[1] || timeValue;
    }
    return '08:00';
  }
  
  window.toggleDate = function(dateStr, enabled) {
    if (!deliveryCapacity[dateStr]) {
      deliveryCapacity[dateStr] = {
        enabled: enabled,
        morning: { start: '08:00', end: '12:00', capacity: 20 },
        evening: { start: '16:00', end: '20:00', capacity: 25 }
      };
    } else {
      deliveryCapacity[dateStr].enabled = enabled;
    }
    renderDateCards();
  };
  
  window.updateSlot = function(dateStr, slot, field, value) {
    if (!deliveryCapacity[dateStr]) {
      deliveryCapacity[dateStr] = {
        enabled: true,
        morning: { start: '08:00', end: '12:00', capacity: 20 },
        evening: { start: '16:00', end: '20:00', capacity: 25 }
      };
    }
    
    if (field === 'capacity') {
      deliveryCapacity[dateStr][slot][field] = parseInt(value) || 0;
    } else {
      deliveryCapacity[dateStr][slot][field] = value;
    }
  };
  
  window.saveConfiguration = async function() {
    const saveBtn = document.getElementById('saveBtn');
    saveBtn.disabled = true;
    saveBtn.textContent = 'Saving...';
    
    try {
      // Always save to localStorage first
      localStorage.setItem('deliveryCapacity', JSON.stringify(deliveryCapacity));
      
      // Try to save to Google Sheets if configured
      if (GOOGLE_SCRIPT_URL && GOOGLE_SCRIPT_URL.includes('script.google.com')) {
        const response = await fetch(GOOGLE_SCRIPT_URL, {
          method: 'POST',
          mode: 'cors',
          headers: {
            'Content-Type': 'text/plain',
          },
          body: JSON.stringify({
            action: 'updateConfig',
            configuration: deliveryCapacity
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          showMessage('Configuration saved to backend successfully!', 'success');
        } else {
          throw new Error(result.error || 'Backend save failed');
        }
      } else {
        showMessage('Configuration saved locally (no backend configured)', 'success');
      }
    } catch (error) {
      showMessage('Saved locally. Backend error: ' + error.message, 'error');
      console.error('Save error:', error);
    } finally {
      saveBtn.disabled = false;
      saveBtn.textContent = 'Save Configuration';
    }
  };
  
  window.syncFromBackend = async function() {
    if (!GOOGLE_SCRIPT_URL || !GOOGLE_SCRIPT_URL.includes('script.google.com')) {
      showMessage('No backend configured', 'error');
      return;
    }
    
    const syncBtn = document.getElementById('syncBtn');
    if (syncBtn) {
      syncBtn.disabled = true;
      syncBtn.textContent = 'Syncing...';
    }
    
    try {
      const response = await fetch(GOOGLE_SCRIPT_URL + '?action=config');
      const data = await response.json();
      
      console.log('Backend response:', data);
      
      if (data.config) {
        deliveryCapacity = data.config;
        bookedSlots = data.bookedSlots || {};
        
        // Update localStorage
        localStorage.setItem('deliveryCapacity', JSON.stringify(deliveryCapacity));
        localStorage.setItem('bookedSlots', JSON.stringify(bookedSlots));
        
        // Auto-detect date range from loaded data
        const dates = Object.keys(deliveryCapacity).sort();
        if (dates.length > 0) {
          document.getElementById('startDate').value = dates[0];
          document.getElementById('endDate').value = dates[dates.length - 1];
          currentDateRange = {
            start: new Date(dates[0]),
            end: new Date(dates[dates.length - 1])
          };
        }
        
        // Re-render
        renderDateCards();
        updateStats();
        
        if (syncBtn) showMessage('Synced with backend successfully!', 'success');
      } else {
        throw new Error('No configuration data received');
      }
    } catch (error) {
      if (syncBtn) showMessage('Error syncing from backend: ' + error.message, 'error');
      console.error('Sync error:', error);
    } finally {
      if (syncBtn) {
        syncBtn.disabled = false;
        syncBtn.textContent = 'Sync from Backend';
      }
    }
  };
  
  function updateStats() {
    const today = new Date();
    const todayStr = formatDate(today);
    let todayCount = 0;
    let weekCount = 0;
    let monthCount = 0;
    
    // Calculate stats
    Object.keys(bookedSlots).forEach(slotKey => {
      const parts = slotKey.split('-');
      if (parts.length >= 4) {
        const dateStr = `${parts[0]}-${parts[1]}-${parts[2]}`;
        const slotDate = new Date(dateStr);
        
        if (dateStr === todayStr) {
          todayCount += bookedSlots[slotKey];
        }
        
        if (isThisWeek(slotDate)) {
          weekCount += bookedSlots[slotKey];
        }
        
        if (slotDate.getMonth() === today.getMonth() && slotDate.getFullYear() === today.getFullYear()) {
          monthCount += bookedSlots[slotKey];
        }
      }
    });
    
    document.getElementById('todayBookings').textContent = todayCount;
    document.getElementById('weekBookings').textContent = weekCount;
    document.getElementById('monthBookings').textContent = monthCount;
    
    // Update bookings table
    updateBookingsTable();
  }
  
  function updateBookingsTable() {
    const tbody = document.querySelector('#bookingsTable tbody');
    tbody.innerHTML = '';
    
    // Get next 14 days of bookings
    const today = new Date();
    for (let i = 0; i < 14; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      const dateStr = formatDate(date);
      
      const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      const dayName = dayNames[date.getDay()];
      const dateConfig = deliveryCapacity[dateStr];
      
      if (!dateConfig || !dateConfig.enabled) continue;
      
      // Morning slot
      const morningKey = `${dateStr}-morning`;
      const morningBooked = bookedSlots[morningKey] || 0;
      const morningAvail = dateConfig.morning.capacity - morningBooked;
      
      const morningRow = document.createElement('tr');
      morningRow.innerHTML = `
        <td>${dateStr} (${dayName})</td>
        <td>Morning (${formatTime(extractTime(dateConfig.morning.start))} - ${formatTime(extractTime(dateConfig.morning.end))})</td>
        <td>${morningBooked}</td>
        <td>${dateConfig.morning.capacity}</td>
        <td>${morningAvail}</td>
        <td>
          ${morningBooked > 0 ? `<button class="clear-btn" onclick="clearSlot('${morningKey}')">Clear</button>` : '-'}
        </td>
      `;
      tbody.appendChild(morningRow);
      
      // Evening slot
      const eveningKey = `${dateStr}-evening`;
      const eveningBooked = bookedSlots[eveningKey] || 0;
      const eveningAvail = dateConfig.evening.capacity - eveningBooked;
      
      const eveningRow = document.createElement('tr');
      eveningRow.innerHTML = `
        <td>${dateStr} (${dayName})</td>
        <td>Evening (${formatTime(extractTime(dateConfig.evening.start))} - ${formatTime(extractTime(dateConfig.evening.end))})</td>
        <td>${eveningBooked}</td>
        <td>${dateConfig.evening.capacity}</td>
        <td>${eveningAvail}</td>
        <td>
          ${eveningBooked > 0 ? `<button class="clear-btn" onclick="clearSlot('${eveningKey}')">Clear</button>` : '-'}
        </td>
      `;
      tbody.appendChild(eveningRow);
    }
  }
  
  window.clearSlot = async function(slotKey) {
    if (confirm('Are you sure you want to clear all bookings for this slot?')) {
      // Clear locally first
      delete bookedSlots[slotKey];
      localStorage.setItem('bookedSlots', JSON.stringify(bookedSlots));
      
      // Try to clear on backend
      if (GOOGLE_SCRIPT_URL && GOOGLE_SCRIPT_URL.includes('script.google.com')) {
        try {
          const response = await fetch(GOOGLE_SCRIPT_URL, {
            method: 'POST',
            headers: {
              'Content-Type': 'text/plain',
            },
            body: JSON.stringify({
              action: 'clearSlot',
              slot: slotKey
            })
          });
          
          const result = await response.json();
          if (result.success) {
            bookedSlots = result.bookedSlots;
            localStorage.setItem('bookedSlots', JSON.stringify(bookedSlots));
          }
        } catch (error) {
          console.error('Failed to clear slot on backend:', error);
        }
      }
      
      updateStats();
      showMessage('Slot cleared successfully', 'success');
    }
  };
  
  window.switchTab = function(tab) {
    // Update active tab
    document.querySelectorAll('.admin-tab').forEach(t => t.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
    
    event.target.classList.add('active');
    document.getElementById(`${tab}-tab`).classList.add('active');
    
    if (tab === 'bookings') {
      updateStats();
    }
  };
  
  // Utility functions
  function formatDate(date) {
    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
  }
  
  function formatTime(time) {
    const [hours, minutes] = time.split(':');
    const hour = parseInt(hours);
    const ampm = hour >= 12 ? 'PM' : 'AM';
    const displayHour = hour % 12 || 12;
    return `${displayHour}:${minutes} ${ampm}`;
  }
  
  function isThisWeek(date) {
    const today = new Date();
    const weekStart = new Date(today);
    weekStart.setDate(today.getDate() - today.getDay());
    const weekEnd = new Date(weekStart);
    weekEnd.setDate(weekStart.getDate() + 6);
    
    return date >= weekStart && date <= weekEnd;
  }
  
  function showMessage(text, type) {
    const messageEl = document.getElementById(type + 'Message');
    messageEl.textContent = text;
    messageEl.style.display = 'block';
    
    setTimeout(() => {
      messageEl.style.display = 'none';
    }, 5000);
  }
  
  window.checkCurrentConfig = function() {
    const savedConfig = localStorage.getItem('deliveryCapacity');
    const savedBookings = localStorage.getItem('bookedSlots');
    
    const debugInfo = {
      currentConfig: deliveryCapacity,
      savedInLocalStorage: savedConfig ? JSON.parse(savedConfig) : null,
      currentBookings: bookedSlots,
      savedBookingsInLocalStorage: savedBookings ? JSON.parse(savedBookings) : null,
      backendURL: GOOGLE_SCRIPT_URL && GOOGLE_SCRIPT_URL.includes('script.google.com') ? 'Configured' : 'Not configured'
    };
    
    document.getElementById('debugInfo').textContent = JSON.stringify(debugInfo, null, 2);
  };
  
  window.clearAllData = function() {
    if (confirm('This will clear all delivery configuration and bookings. Are you sure?')) {
      localStorage.removeItem('deliveryCapacity');
      localStorage.removeItem('bookedSlots');
      location.reload();
    }
  };
  
  // Initialize on load
  init();
})();
</script>