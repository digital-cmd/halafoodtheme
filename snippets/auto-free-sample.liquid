{%- liquid
  assign sample_threshold = 2000
  assign sample_collection = 'free-samples'
-%}

<!-- DEBUG: Check collection -->
<script>
console.log('üîç COLLECTION DEBUG:');
console.log('Looking for: {{ sample_collection }}');
{%- assign test_col = collections['free-samples'] -%}
console.log('Collection found: {{ test_col.id }}');
console.log('Collection title: {{ test_col.title }}');
console.log('Collection handle: {{ test_col.handle }}');
console.log('Products in collection: {{ test_col.products_count }}');
console.log('Collection published: {{ test_col.published }}');
{%- for product in test_col.products limit: 5 -%}
  console.log('Product {{ forloop.index }}: {{ product.title }} (ID: {{ product.id }}, Available: {{ product.available }})');
{%- endfor -%}
</script>

<script>
(function() {
  console.log('üéÅ FREE SAMPLE: Script starting...');
  
  const SAMPLE_THRESHOLD = {{ sample_threshold }};
  const SAMPLE_COLLECTION = '{{ sample_collection }}';
  
  // Get products from collection
  const SAMPLE_PRODUCTS = [
    {%- for product in collections['free-samples'].products limit: 10 -%}
      {%- if product.available and product.first_available_variant -%}
        {
          handle: '{{ product.handle }}',
          title: '{{ product.title | escape }}',
          variantId: {{ product.first_available_variant.id }},
          available: true
        }{%- unless forloop.last -%},{%- endunless -%}
      {%- endif -%}
    {%- endfor -%}
  ];

  // Fallback: Try to get specific products if collection is empty
  {%- if collections['free-samples'].products_count == 0 or collections['free-samples'].all_products_count == 0 -%}
    console.log('‚ö†Ô∏è Collection is empty, trying fallback products...');
    const FALLBACK_PRODUCTS = [
      {%- assign sample1 = all_products['flora-orange-sample'] -%}
      {%- assign sample2 = all_products['free-random-sample'] -%}
      {%- assign sample3 = all_products['free-sample'] -%}
      
      {%- if sample1 and sample1.available and sample1.first_available_variant -%}
        {
          handle: '{{ sample1.handle }}',
          title: '{{ sample1.title | escape }}',
          variantId: {{ sample1.first_available_variant.id }},
          available: true
        },
      {%- endif -%}
      
      {%- if sample2 and sample2.available and sample2.first_available_variant -%}
        {
          handle: '{{ sample2.handle }}',
          title: '{{ sample2.title | escape }}',
          variantId: {{ sample2.first_available_variant.id }},
          available: true
        },
      {%- endif -%}
      
      {%- if sample3 and sample3.available and sample3.first_available_variant -%}
        {
          handle: '{{ sample3.handle }}',
          title: '{{ sample3.title | escape }}',
          variantId: {{ sample3.first_available_variant.id }},
          available: true
        }
      {%- endif -%}
    ].filter(p => p);
    
    if (FALLBACK_PRODUCTS.length > 0) {
      SAMPLE_PRODUCTS.push(...FALLBACK_PRODUCTS);
    }
  {%- endif -%}

  console.log('üì¶ FREE SAMPLE: Found', SAMPLE_PRODUCTS.length, 'products');
  console.log('Products:', SAMPLE_PRODUCTS);
  console.log('üí∞ FREE SAMPLE: Threshold is ‚Ç¨' + (SAMPLE_THRESHOLD/100));



  async function checkAndAddFreeSample() {
    console.log('üîÑ FREE SAMPLE: Checking cart...');
    
    // Exit if no products available
    if (SAMPLE_PRODUCTS.length === 0) {
      console.error('‚ùå FREE SAMPLE: No products available, exiting check');
      return;
    }
    
    try {
      const cart = await fetch('/cart.js').then(r => r.json());
      console.log('üõí FREE SAMPLE: Cart total:', cart.total_price, 'cents (‚Ç¨' + (cart.total_price/100) + ')');
      
      const hasSample = cart.items.some(item => 
        item.properties && item.properties['_free_sample'] === 'true'
      );
      console.log('üìå FREE SAMPLE: Already has sample?', hasSample);
      
      if (cart.total_price >= SAMPLE_THRESHOLD && !hasSample) {
        console.log('‚úÖ FREE SAMPLE: Eligible! Adding sample...');
        
        const availableSample = SAMPLE_PRODUCTS[0];
        if (!availableSample) {
          console.log('‚ùå FREE SAMPLE: No available samples');
          return;
        }
        
        console.log('üì¶ FREE SAMPLE: Adding:', availableSample);
        
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            id: availableSample.variantId,
            quantity: 1,
            properties: {
              '_free_sample': 'true',
              '_sample_threshold': SAMPLE_THRESHOLD,
              '_auto_added': new Date().toISOString()
            }
          })
        });
        
        if (response.ok) {
          const result = await response.json();
          console.log('‚úÖ FREE SAMPLE: Added successfully!', result);
          document.dispatchEvent(new CustomEvent('cart:updated'));
          
          if (window.location.pathname.includes('/cart')) {
            setTimeout(() => location.reload(), 1500);
          }
        } else {
          const error = await response.text();
          console.error('‚ùå FREE SAMPLE: Failed to add:', error);
        }
        
      } else if (cart.total_price < SAMPLE_THRESHOLD && hasSample) {
        console.log('üóëÔ∏è FREE SAMPLE: Below threshold, removing...');
        
        const sampleItem = cart.items.find(item => 
          item.properties && item.properties['_free_sample'] === 'true'
        );
        
        if (sampleItem) {
          await fetch('/cart/change.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              id: sampleItem.key,
              quantity: 0
            })
          });
          
          console.log('‚úÖ FREE SAMPLE: Removed');
          document.dispatchEvent(new CustomEvent('cart:updated'));
          
          if (window.location.pathname.includes('/cart')) {
            setTimeout(() => location.reload(), 1500);
          }
        }
      } else {
        console.log('‚ÑπÔ∏è FREE SAMPLE: No action needed');
      }
    } catch (error) {
      console.error('‚ùå FREE SAMPLE Error:', error);
    }
  }

  // Only initialize if products are available
  if (SAMPLE_PRODUCTS.length > 0) {
    // Check immediately
    console.log('‚è∞ FREE SAMPLE: Initial check in 1 second...');
    setTimeout(checkAndAddFreeSample, 1000);
    
    // Monitor cart changes
    document.addEventListener('cart:updated', () => {
      console.log('üì° FREE SAMPLE: Cart updated event');
      setTimeout(checkAndAddFreeSample, 500);
    });
    
    // Monitor AJAX calls
    const originalFetch = window.fetch;
    window.fetch = function(...args) {
      const [url] = args;
      if (url && (url.includes('/cart/add') || url.includes('/cart/change') || url.includes('/cart/update'))) {
        return originalFetch.apply(this, args).then(response => {
          console.log('üì° FREE SAMPLE: Cart AJAX detected');
          setTimeout(checkAndAddFreeSample, 500);
          return response;
        });
      }
      return originalFetch.apply(this, args);
    };
    
  } else {
    console.error('‚ùå FREE SAMPLE: No products available in collection!');
    console.error('Please ensure:');
    console.error('1. The "free-samples" collection exists');
    console.error('2. Products in the collection are in stock');
    console.error('3. Products have available variants');
  }
  
})();
</script>
