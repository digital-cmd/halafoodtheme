{%- liquid
  assign sample_threshold = 2000
  assign sample_collection = 'free-samples'
-%}

{%- comment -%} Only load on pages where cart interactions happen {%- endcomment -%}
{%- unless request.page_type == 'cart' or template contains 'product' or template contains 'collection' or template contains 'index' -%}
  {%- comment -%} Exit early on pages where this isn't needed {%- endcomment -%}
{%- else -%}

<!-- Auto Free Sample System -->
<script>
(function() {
  console.log('🎁 FREE SAMPLE: Initializing...');
  
  const SAMPLE_THRESHOLD = {{ sample_threshold }};
  const SAMPLE_COLLECTION = '{{ sample_collection }}';
  
  // Get products from collection with proper null checking
  const SAMPLE_PRODUCTS = [
    {%- assign sample_collection_obj = collections[sample_collection] -%}
    {%- if sample_collection_obj and sample_collection_obj.products.size > 0 -%}
      {%- for product in sample_collection_obj.products limit: 10 -%}
        {%- if product.available and product.first_available_variant -%}
          {
            handle: '{{ product.handle }}',
            title: '{{ product.title | escape }}',
            variantId: {{ product.first_available_variant.id }},
            available: true
          }{%- unless forloop.last -%},{%- endunless -%}
        {%- endif -%}
      {%- endfor -%}
    {%- else -%}
      {%- comment -%} Fallback products if collection is empty/missing {%- endcomment -%}
      {%- assign sample1 = all_products['flora-orange-sample'] -%}
      {%- if sample1 and sample1.available and sample1.first_available_variant -%}
        {
          handle: '{{ sample1.handle }}',
          title: '{{ sample1.title | escape }}',
          variantId: {{ sample1.first_available_variant.id }},
          available: true
        }
      {%- endif -%}
    {%- endif -%}
  ].filter(p => p);

  console.log('📦 FREE SAMPLE: Found', SAMPLE_PRODUCTS.length, 'products');
  console.log('💰 FREE SAMPLE: Threshold is €' + (SAMPLE_THRESHOLD/100));

  if (SAMPLE_PRODUCTS.length === 0) {
    console.error('❌ FREE SAMPLE: No products available!');
    console.error('Please check:');
    console.error('1. Collection "' + SAMPLE_COLLECTION + '" exists');
    console.error('2. Collection has products in stock');
    return;
  }

  async function checkAndAddFreeSample() {
    console.log('🔄 FREE SAMPLE: Checking cart...');
    
    try {
      const cart = await fetch('/cart.js', {
        headers: {
          'Cache-Control': 'no-cache'
        }
      }).then(r => r.json());
      
      console.log('🛒 Cart total: €' + (cart.total_price/100));
      
      const hasSample = cart.items.some(item => 
        item.properties && item.properties['_free_sample'] === 'true'
      );
      
      if (cart.total_price >= SAMPLE_THRESHOLD && !hasSample) {
        console.log('✅ Eligible for free sample! Adding...');
        
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            id: SAMPLE_PRODUCTS[0].variantId,
            quantity: 1,
            properties: {
              '_free_sample': 'true',
              '_sample_threshold': SAMPLE_THRESHOLD
            }
          })
        });
        
        if (response.ok) {
          console.log('✅ Sample added successfully!');
          // Trigger cart update
          document.dispatchEvent(new CustomEvent('cart:updated'));
          if (window.location.pathname === '/cart') {
            setTimeout(() => location.reload(), 1000);
          }
        }
      } else if (cart.total_price < SAMPLE_THRESHOLD && hasSample) {
        console.log('🗑️ Below threshold, removing sample...');
        const sampleItem = cart.items.find(item => 
          item.properties && item.properties['_free_sample'] === 'true'
        );
        
        if (sampleItem) {
          await fetch('/cart/change.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              id: sampleItem.key,
              quantity: 0
            })
          });
          
          console.log('✅ Sample removed');
          if (window.location.pathname === '/cart') {
            setTimeout(() => location.reload(), 1000);
          }
        }
      }
    } catch (error) {
      console.error('❌ FREE SAMPLE Error:', error);
    }
  }

  // Initial check after page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(checkAndAddFreeSample, 1000);
    });
  } else {
    setTimeout(checkAndAddFreeSample, 1000);
  }
  
  // Monitor cart changes
  document.addEventListener('cart:updated', () => {
    setTimeout(checkAndAddFreeSample, 500);
  });
  
  // Intercept cart AJAX
  const originalFetch = window.fetch;
  window.fetch = function(...args) {
    const [url] = args;
    if (url && (url.includes('/cart/add') || url.includes('/cart/change') || url.includes('/cart/update'))) {
      return originalFetch.apply(this, args).then(response => {
        setTimeout(checkAndAddFreeSample, 500);
        return response;
      });
    }
    return originalFetch.apply(this, args);
  };
  
})();
</script>
{%- endunless -%}