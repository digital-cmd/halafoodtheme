{%- liquid
  assign sample_threshold = 2000
  assign sample_collection = 'free-samples'
-%}

<!-- DEBUG: Check collection -->
<script>
console.log('🔍 COLLECTION DEBUG:');
console.log('Looking for: {{ sample_collection }}');
{%- assign test_col = collections['free-samples'] -%}
console.log('Collection found: {{ test_col.id }}');
console.log('Collection title: {{ test_col.title }}');
console.log('Collection handle: {{ test_col.handle }}');
console.log('Products in collection: {{ test_col.products_count }}');
console.log('Collection published: {{ test_col.published }}');
{%- for product in test_col.products limit: 5 -%}
  console.log('Product {{ forloop.index }}: {{ product.title }} (ID: {{ product.id }}, Available: {{ product.available }})');
{%- endfor -%}
</script>

<script>
(function() {
  console.log('🎁 FREE SAMPLE: Script starting...');
  
  const SAMPLE_THRESHOLD = {{ sample_threshold }};
  const SAMPLE_COLLECTION = '{{ sample_collection }}';
  
  // Try to get products directly
  const SAMPLE_PRODUCTS = [
    {%- for product in collections['free-samples'].products limit: 10 -%}
      {%- if product.available and product.first_available_variant -%}
        {
          handle: '{{ product.handle }}',
          title: '{{ product.title | escape }}',
          variantId: {{ product.first_available_variant.id }},
          available: true
        }{%- unless forloop.last -%},{%- endunless -%}
      {%- endif -%}
    {%- endfor -%}
  ];

  // If that didn't work, try all collections for the product
  if (SAMPLE_PRODUCTS.length === 0) {
    console.log('❌ No products found via collection, trying direct product search...');
    const BACKUP_PRODUCTS = [
      {%- assign sample_product = all_products['flora-orange-sample'] -%}
      {%- if sample_product and sample_product.available -%}
        {
          handle: '{{ sample_product.handle }}',
          title: '{{ sample_product.title | escape }}',
          variantId: {{ sample_product.first_available_variant.id }},
          available: true
        }
      {%- endif -%}
    ];
    console.log('Backup products:', BACKUP_PRODUCTS);
  }

  console.log('📦 FREE SAMPLE: Found', SAMPLE_PRODUCTS.length, 'products');
  console.log('Products:', SAMPLE_PRODUCTS);
  console.log('💰 FREE SAMPLE: Threshold is €' + (SAMPLE_THRESHOLD/100));

  // If no products found, exit
  if (SAMPLE_PRODUCTS.length === 0) {
    console.error('❌ FREE SAMPLE: No products available in collection!');
    return;
  }

  // Multi-language translations
  const TRANSLATIONS = {
    ar: {
      title: "🎁 مبروك! حصلت على هدية مجانية",
      message: "تم إضافة عينة مجانية إلى سلتك",
      subtext: "عرض خاص للطلبات فوق 20€",
      button: "ممتاز!"
    },
    en: {
      title: "🎁 Congratulations! You got a free gift",
      message: "A free sample has been added to your cart",
      subtext: "Special offer for orders over €20",
      button: "Great!"
    },
    de: {
      title: "🎁 Glückwunsch! Sie haben ein Geschenk erhalten",
      message: "Eine kostenlose Probe wurde Ihrem Warenkorb hinzugefügt",
      subtext: "Sonderangebot für Bestellungen über 20€",
      button: "Super!"
    }
  };

  function getCurrentLang() {
    const path = window.location.pathname;
    if (path.startsWith('/en')) return 'en';
    if (path.startsWith('/de')) return 'de';
    return 'ar';
  }

  function showSampleNotification(productTitle) {
    console.log('🎉 FREE SAMPLE: Showing notification for:', productTitle);
    
    const lang = getCurrentLang();
    const t = TRANSLATIONS[lang];
    
    const existing = document.querySelector('.free-sample-notification');
    if (existing) existing.remove();
    
    const notification = document.createElement('div');
    notification.className = 'free-sample-notification';
    notification.innerHTML = `
      <div class="sample-notification-overlay"></div>
      <div class="sample-notification-modal">
        <div class="sample-notification-icon">
          <svg width="60" height="60" viewBox="0 0 24 24" fill="none">
            <circle cx="12" cy="12" r="10" fill="#4CAF50"/>
            <path d="M8 12l2 2 4-4" stroke="white" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </div>
        <h3 class="sample-notification-title">${t.title}</h3>
        <p class="sample-notification-message">${t.message}</p>
        <p class="sample-notification-product">"${productTitle}"</p>
        <p class="sample-notification-subtext">${t.subtext}</p>
        <button class="sample-notification-button" onclick="this.closest('.free-sample-notification').remove()">
          ${t.button}
        </button>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      if (notification.parentNode) {
        notification.classList.add('hiding');
        setTimeout(() => notification.remove(), 300);
      }
    }, 5000);
  }

  async function checkAndAddFreeSample() {
    console.log('🔄 FREE SAMPLE: Checking cart...');
    
    try {
      const cart = await fetch('/cart.js').then(r => r.json());
      console.log('🛒 FREE SAMPLE: Cart total:', cart.total_price, 'cents (€' + (cart.total_price/100) + ')');
      
      const hasSample = cart.items.some(item => 
        item.properties && item.properties['_free_sample'] === 'true'
      );
      console.log('📌 FREE SAMPLE: Already has sample?', hasSample);
      
      if (cart.total_price >= SAMPLE_THRESHOLD && !hasSample) {
        console.log('✅ FREE SAMPLE: Eligible! Adding sample...');
        
        const availableSample = SAMPLE_PRODUCTS[0]; // Take first available
        if (!availableSample) {
          console.log('❌ FREE SAMPLE: No available samples');
          return;
        }
        
        console.log('📦 FREE SAMPLE: Adding:', availableSample);
        
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            id: availableSample.variantId,
            quantity: 1,
            properties: {
              '_free_sample': 'true',
              '_sample_threshold': SAMPLE_THRESHOLD,
              '_auto_added': new Date().toISOString()
            }
          })
        });
        
        if (response.ok) {
          const result = await response.json();
          console.log('✅ FREE SAMPLE: Added successfully!', result);
          showSampleNotification(availableSample.title);
          document.dispatchEvent(new CustomEvent('cart:updated'));
          
          if (window.location.pathname.includes('/cart')) {
            setTimeout(() => location.reload(), 1500);
          }
        } else {
          const error = await response.text();
          console.error('❌ FREE SAMPLE: Failed to add:', error);
        }
        
      } else if (cart.total_price < SAMPLE_THRESHOLD && hasSample) {
        console.log('🗑️ FREE SAMPLE: Below threshold, removing...');
        
        const sampleItem = cart.items.find(item => 
          item.properties && item.properties['_free_sample'] === 'true'
        );
        
        if (sampleItem) {
          await fetch('/cart/change.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              id: sampleItem.key,
              quantity: 0
            })
          });
          
          console.log('✅ FREE SAMPLE: Removed');
          document.dispatchEvent(new CustomEvent('cart:updated'));
        }
      } else {
        console.log('ℹ️ FREE SAMPLE: No action needed');
      }
    } catch (error) {
      console.error('❌ FREE SAMPLE Error:', error);
    }
  }

  // Check immediately
  console.log('⏰ FREE SAMPLE: Initial check in 1 second...');
  setTimeout(checkAndAddFreeSample, 1000);
  
  // Monitor cart changes
  document.addEventListener('cart:updated', () => {
    console.log('📡 FREE SAMPLE: Cart updated event');
    setTimeout(checkAndAddFreeSample, 500);
  });
  
  // Monitor AJAX
  const originalFetch = window.fetch;
  window.fetch = function(...args) {
    const [url] = args;
    if (url && (url.includes('/cart/add') || url.includes('/cart/change') || url.includes('/cart/update'))) {
      return originalFetch.apply(this, args).then(response => {
        console.log('📡 FREE SAMPLE: Cart AJAX detected');
        setTimeout(checkAndAddFreeSample, 500);
        return response;
      });
    }
    return originalFetch.apply(this, args);
  };
  
  // Manual test function
  window.testFreeSample = function() {
    showSampleNotification('عينة برتقال فلورا');
  };
  console.log('💡 Type testFreeSample() to test the popup');
  
})();
</script>

<!-- Keep all CSS styles -->
<style>
/* Free Sample Notification Popup */
.free-sample-notification {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 99999;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: fadeIn 0.3s ease;
}

.free-sample-notification.hiding {
  animation: fadeOut 0.3s ease;
}

.sample-notification-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(5px);
}

.sample-notification-modal {
  position: relative;
  background: white;
  border-radius: 20px;
  padding: 30px;
  max-width: 400px;
  width: 90%;
  text-align: center;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  animation: slideUp 0.4s ease;
}

.sample-notification-icon {
  margin-bottom: 15px;
  animation: bounceIn 0.6s ease 0.2s both;
}

.sample-notification-title {
  color: #2c3e50;
  font-size: 20px;
  font-weight: bold;
  margin: 0 0 10px;
  line-height: 1.4;
}

.sample-notification-message {
  color: #555;
  font-size: 16px;
  margin: 0 0 8px;
}

.sample-notification-product {
  color: #4CAF50;
  font-weight: 600;
  font-size: 18px;
  margin: 0 0 10px;
}

.sample-notification-subtext {
  color: #888;
  font-size: 14px;
  margin: 0 0 20px;
}

.sample-notification-button {
  background: linear-gradient(135deg, #4CAF50, #45a049);
  color: white;
  border: none;
  padding: 12px 40px;
  border-radius: 25px;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
}

.sample-notification-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes fadeOut {
  from { opacity: 1; }
  to { opacity: 0; }
}

@keyframes slideUp {
  from {
    transform: translateY(30px) scale(0.95);
    opacity: 0;
  }
  to {
    transform: translateY(0) scale(1);
    opacity: 1;
  }
}

@keyframes bounceIn {
  0% { transform: scale(0); opacity: 0; }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); opacity: 1; }
}
</style>